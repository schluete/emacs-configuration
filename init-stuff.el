;; all the other configuration stuff

;; ein paar Hilfsmethoden, um die Auswahl von moeglichen hippie-expand-Completions ueber den
;; ido-mode machen zu koennen. Die Anregung kommt aus dem Emacs-Wiki, ich bin mir noch nicht
;; so ganz sicher, ob ich das wirklich so haben will
(defun my-hippie-expand-completions (&optional hippie-expand-function)
  "Return the full list of possible completions generated by `hippie-expand'.
    The optional argument can be generated with `make-hippie-expand-function'."
  (let ((this-command 'my-hippie-expand-completions)
        (last-command last-command)
        (buffer-modified (buffer-modified-p))
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
      (while (progn
               (funcall hippie-expand-function nil)
               (setq last-command 'my-hippie-expand-completions)
               (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began, and (save-current-buffer) seems a
    ;; bit heavyweight in the circumstances.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))

(defmacro my-ido-hippie-expand-with (hippie-expand-function)
  "Generate an interactively-callable function that offers ido-based completion
    using the specified hippie-expand function."
  `(call-interactively
    (lambda (&optional selection)
      (interactive
       (let ((options (my-hippie-expand-completions ,hippie-expand-function)))
         (if options
             (list (ido-completing-read "Completions: " options)))))
      (if selection
          (he-substitute-string selection t)
        (message "No expansion found")))))

(defun my-ido-hippie-expand ()
  "Offer ido-based completion for the word at point."
  (interactive)
  (my-ido-hippie-expand-with 'hippie-expand))

;; wir wollen eine Completion nicht nur mit M-TAB oder C-M-i, sondern mit C-SPACE ausloesen
;(define-key evil-insert-state-map (kbd "C-SPC") 'my-ido-hippie-expand)
(define-key evil-insert-state-map (kbd "C-SPC") 'hippie-expand)

;; die Reihenfolge der moeglichen Completions ein bischen umdrehen, sonst ist's nervig
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))


;; Beispiel fuer eine Custom-Expand-Funktion, die nur auf bestimmte Completions
;; vervollstaendigt, um nicht alle aus der try-functions-list durchzugehen
;; (global-set-key [(meta f5)] (make-hippie-expand-function
;;                              '(try-expand-dcsh-command
;;                                try-expand-dabbrev-visible
;;                                try-expand-dabbrev
;;                                try-expand-dabbrev-all-buffers) t))

;; beim Speichern sollen alle trailing whitespaces am Ende der Zeilen geloescht werden,
;; ausserdem noch Leerzeilen am Ende und am Anfang der Datei etc. blabla.
(add-hook 'before-save-hook 'whitespace-cleanup)

;; wenn eine .h-Datei geoeffnet wird und diese den String "@interface" enthaelt
;; dann gehen wir mal von Objective C aus und laden den entsprechenden Mode
(add-to-list 'magic-mode-alist
             `(,(lambda ()
                  (and (string= (file-name-extension buffer-file-name) "h")
                       (re-search-forward "@\\<interface\\>"
                                          magic-mode-regexp-match-limit t)))
               . objc-mode))

;; tramp, for sudo access
(require 'tramp)
(setq tramp-default-method "ssh")

;; no audible nor visual bell
(setq-default visible-bell t)
(setq-default ring-bell-function 'ignore)

;; geaenderte Files automatisch neu laden
(global-auto-revert-mode t)

;; Windows grundsaetzlich nur vertical splitten
(setq-default split-width-threshold nil)

;; indentation im cc-mode fuer einige Stellen reparieren
(setq-default c-offsets-alist '((case-label . 2)))

;;; kein Debugger bei normalen Fehlern, nervt beim
;;; Viper bspw. bei einen "h" am Anfang der Zeile
;(setq-default debug-on-error nil)

;;; keine neuen Fenster fuer jede Datei bei XCode
;(setq ns-pop-up-frames 'nil)

;; A happy word and the world looks brither again!
(message "%s" "I love it when a plan comes together!")

(provide 'init-stuff)
